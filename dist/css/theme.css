@charset "UTF-8";
/*---------------------------------------------------------------------------*\

    Breakpoints

    Mandatory code to be included in the main scss file.

    Handles the breakpoints as SASS mixins. Influenced by David Gilbertson: 
    https://medium.freecodecamp.com/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862

\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\

    Icons

    Mandatory code to be included in the main scss file.

    Styles for the custom made icon web font. The set includes icons for basic 
    functionality of the website (e.g. menu, close, add, delete) as well as 
    some icons for basic information (e.g. info, error, warning). 

    This font includes a limited set of icons for performance reasons. If 
    more icons are needed, we recommend to put these in a separate web font.

    Influenced by (but not limited to) Material Icons, outlined: 
    https://fonts.google.com/icons

    Tools used to create the web font: 
    https://icomoon.io/app/

\*---------------------------------------------------------------------------*/
@font-face {
  font-family: "jm-admin";
  src: url("../fonts/jm-admin.ttf?hchne6") format("truetype"), url("../fonts/jm-admin.woff?hchne6") format("woff"), url("../fonts/jm-admin.svg?hchne6#jm-admin") format("svg");
  font-weight: normal;
  font-style: normal;
  font-display: block;
}
[class^=icon-]:before, [class*=" icon-"]:before {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: "jm-admin" !important;
  speak: never;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-toggle_on:before {
  content: "\e9f6";
}

.icon-toggle_off:before {
  content: "\e9f5";
}

.icon-fullscreen_exit:before {
  content: "\e5d1";
}

.icon-fullscreen:before {
  content: "\e5d0";
}

.icon-send:before {
  content: "\e163";
}

.icon-call:before {
  content: "\e93d";
}

.icon-explore:before {
  content: "\e93e";
}

.icon-first_page:before {
  content: "\e93f";
}

.icon-last_page:before {
  content: "\e940";
}

.icon-location_on:before {
  content: "\e93b";
}

.icon-mail:before {
  content: "\e93c";
}

.icon-arrow_upward:before {
  content: "\e930";
}

.icon-arrow_downward:before {
  content: "\e933";
}

.icon-arrow_forward:before {
  content: "\e934";
}

.icon-arrow_back:before {
  content: "\e935";
}

.icon-print:before {
  content: "\e936";
}

.icon-lists:before {
  content: "\e92e";
}

.icon-visibility:before {
  content: "\e92f";
}

.icon-grid_view:before {
  content: "\e931";
}

.icon-select:before {
  content: "\e932";
}

.icon-code:before {
  content: "\e92b";
}

.icon-flag:before {
  content: "\e92c";
}

.icon-notifications:before {
  content: "\e92d";
}

.icon-schedule:before {
  content: "\e92a";
}

.icon-download:before {
  content: "\e926";
}

.icon-language:before {
  content: "\e927";
}

.icon-timer:before {
  content: "\e928";
}

.icon-insert_chart:before {
  content: "\e929";
}

.icon-sell:before {
  content: "\e91f";
}

.icon-filter:before {
  content: "\e920";
}

.icon-edit:before {
  content: "\e921";
}

.icon-import_contacts:before {
  content: "\e922";
}

.icon-favorite:before {
  content: "\e923";
}

.icon-star:before {
  content: "\e924";
}

.icon-settings:before {
  content: "\e925";
}

.icon-lightbulb:before {
  content: "\e91e";
}

.icon-person:before {
  content: "\e91d";
}

.icon-calendar:before {
  content: "\e90d";
}

.icon-content_copy:before {
  content: "\e90f";
}

.icon-content_paste:before {
  content: "\e913";
}

.icon-delete:before {
  content: "\e914";
}

.icon-draft:before {
  content: "\e915";
}

.icon-restart:before {
  content: "\e916";
}

.icon-search:before {
  content: "\e917";
}

.icon-shield:before {
  content: "\e918";
}

.icon-warning:before {
  content: "\e919";
}

.icon-error:before {
  content: "\e902";
}

.icon-chat_bubble_outline:before {
  content: "\e937";
}

.icon-add:before {
  content: "\e903";
}

.icon-add_circle:before {
  content: "\e90b";
}

.icon-clear:before {
  content: "\e900";
}

.icon-filter_list:before {
  content: "\e938";
}

.icon-gps_not_fixed:before {
  content: "\e939";
}

.icon-functions:before {
  content: "\e93a";
}

.icon-keyboard_arrow_down:before {
  content: "\e904";
}

.icon-keyboard_arrow_left:before {
  content: "\e905";
}

.icon-keyboard_arrow_right:before {
  content: "\e906";
}

.icon-keyboard_arrow_up:before {
  content: "\e907";
}

.icon-check:before {
  content: "\e910";
}

.icon-expand_less:before {
  content: "\e91a";
}

.icon-expand_more:before {
  content: "\e91b";
}

.icon-menu:before {
  content: "\e901";
}

.icon-more_vert:before {
  content: "\e91c";
}

.icon-refresh:before {
  content: "\e90e";
}

.icon-bookmark:before {
  content: "\e911";
}

.icon-info:before {
  content: "\e912";
}

.icon-launch:before {
  content: "\e908";
}

.icon-lock_open:before {
  content: "\e909";
}

.icon-lock:before {
  content: "\e90a";
}

.icon-help:before {
  content: "\e90c";
}

/*---------------------------------------------------------------------------*\

    Colors

    Mandatory code to be included in the main scss file.

    SASS variables of colors used in the app. These are use for manipulating 
    and making variants of the colors.

\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\

    Content section

    Mandatory code to be included in the main scss file.

    Styles for a wrapping element with content inside.

\*---------------------------------------------------------------------------*/
section.content {
  margin: 0 0 var(--margin-paragraph-bottom) 0;
  max-width: 100%;
  box-sizing: border-box;
  padding: var(--margin-paragraph-bottom) var(--padding-buttons);
  border: var(--border-light);
  border-radius: var(--border-radius-button);
}
section.content > header:first-child {
  margin: calc(1px - var(--margin-paragraph-bottom) - 1px) calc(1px - var(--padding-buttons) - 1px) var(--margin-paragraph-bottom) calc(1px - var(--padding-buttons) - 1px);
  padding: var(--padding-buttons) calc(var(--padding-buttons) + 1px);
  border-top-right-radius: var(--border-radius-button);
  border-top-left-radius: var(--border-radius-button);
}
section.content.dark {
  background-color: var(--color-header-background);
}
section.centered {
  margin-right: auto;
  margin-left: auto;
  width: fit-content;
  block-size: fit-content;
}
section.centered.minimum-width {
  width: min-content;
  block-size: min-content;
}
section *:first-child {
  margin-top: 0;
}
section *:last-child {
  margin-bottom: 0;
}

/*---------------------------------------------------------------------------*\

    Align

    Mandatory code to be included in the main scss file.

    Styles to control the positioning of items.

\*---------------------------------------------------------------------------*/
.align {
  --column-gap: var(--padding-buttons);
  --row-gap: var(--padding-buttons);
  display: flex !important;
  column-gap: var(--column-gap);
  row-gap: var(--row-gap);
  flex-wrap: wrap;
  align-items: baseline;
  justify-content: flex-start;
}
.align.center {
  justify-content: center;
}
.align.right {
  justify-content: flex-end;
}
.align.vertical-top {
  align-items: flex-start;
}
.align.vertical-center {
  align-items: center;
}
.align.vertical-bottom {
  align-items: flex-end;
}
.align.no-wrap {
  flex-wrap: nowrap;
}
.align.wrap-reverse {
  flex-wrap: wrap-reverse;
}
.align > * {
  flex: 0 1 fit-content;
  margin-bottom: 0;
}
.align > *.left {
  margin-right: auto;
}
.align > *.right {
  margin-left: auto;
}
.align > *.center {
  margin-right: auto;
  margin-left: auto;
}
.align > *.vertical-top {
  align-self: flex-start;
}
.align > *.vertical-center {
  align-self: center;
}
.align > *.vertical-bottom {
  align-self: flex-end;
}
.align > *.grow-horizontal {
  flex-grow: 1;
  flex-basis: min-content;
}
.align > *.grow-vertical {
  align-self: stretch;
}
.align.header {
  align-items: flex-start;
  justify-content: flex-end;
}
.align.header > *:first-child {
  flex-grow: 1;
  flex-basis: min-content;
}
.align.pagination {
  --column-gap: 0.75rem;
  align-items: center;
  justify-content: flex-end;
}
.align.pagination > *:first-child:not(:empty) {
  margin-right: 2.25rem;
}
.align.right > details:last-child > nav, .align.header > details:last-child > nav, .align > details.right:last-child > nav, .align > details.grow-horizontal:last-child > nav {
  right: 0;
}

/*---------------------------------------------------------------------------*\

    Details

    Mandatory code to be included in the main scss file.

    Content that the user can show and hide on demand.

\*---------------------------------------------------------------------------*/
details {
  position: relative;
  display: block;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
  line-height: 1.3;
}
details summary {
  display: inline-block;
  cursor: pointer;
  list-style: none;
  margin: 0;
  /* Remove the default disclosure arrow on iOS */
}
details summary > *:is(h1, h2, h3, h4, h5, p) {
  display: inline;
  margin: 0;
}
details summary:focus-visible {
  outline: var(--outline-buttons);
}
details summary:after {
  font-family: "jm-admin" !important;
  content: "\e906";
  display: inline-block;
  margin: 0 0 0 0.5em;
  transition: 0.2s transform;
  transform: translateY(0.1em);
}
details summary:empty:after {
  margin: 0;
  transform: none;
}
details summary + *:not(nav) {
  margin-top: var(--margin-paragraph-bottom) !important;
}
details summary::-webkit-details-marker {
  display: none;
}
details summary:has(> *):after {
  content: none;
}
details summary:has(> *) > *:last-child:after {
  font-family: "jm-admin" !important;
  content: "\e906";
  display: inline-block;
  margin: 0 0 0 0.5em;
  transition: 0.2s transform;
  transform: translateY(0.1em);
}
details summary:empty:not([class^=icon-], [class*=" icon-"]):after {
  content: "\e91c";
  transition: none !important;
  transform: none !important;
}
details[open] summary:after {
  transform: rotate(90deg) translateX(0.1em);
}
details[open] summary:has(> *) > *:last-child:after {
  transform: rotate(90deg) translateX(0.1em);
}
details > *:last-child {
  margin-bottom: 0 !important;
}
details:not(.badge):has(> nav) {
  display: inline-block;
}
details:not(.badge):has(> nav) > nav {
  min-width: 100%;
}
details > nav {
  display: block;
  position: absolute;
  background: white;
  text-align: left;
  margin-top: 2px;
  box-sizing: border-box;
  border: var(--border-medium);
  box-shadow: var(--box-shadow-medium);
  border-radius: var(--border-radius-button);
  font-size: 0.75rem;
  font-weight: 400;
  line-height: normal;
  z-index: 2;
  width: fit-content;
}
details > nav > * {
  padding: calc(var(--padding-buttons) / 2) var(--padding-buttons);
  margin: 0;
  border-radius: 0 !important;
}
details > nav > *:first-child {
  padding-top: var(--padding-buttons);
  border-top-left-radius: inherit !important;
  border-top-right-radius: inherit !important;
}
details > nav > *:last-child {
  padding-bottom: var(--padding-buttons);
  border-bottom-left-radius: inherit !important;
  border-bottom-right-radius: inherit !important;
}
details > nav > *:is(h5, p) {
  font-size: inherit;
}
details > nav > a {
  display: block;
}
details > nav > a:hover, details > nav > a:focus {
  background-color: var(--color-link-background-hover);
}
details > nav a {
  color: var(--color-text);
  text-decoration: none;
  white-space: nowrap;
  outline-offset: -1px;
}
details > nav a:hover, details > nav a:focus {
  text-decoration: none;
}
details > nav > hr {
  height: 0;
  padding: 0;
  margin: var(--padding-buttons) 0;
}

/*---------------------------------------------------------------------------*\

    Forms

    Mandatory code to be included in the main scss file.

    Styles for form elements.

\*---------------------------------------------------------------------------*/
input, button, textarea, select, a.button {
  -webkit-appearance: none;
  appearance: none;
  display: inline-flex;
  color: var(--color-text);
  padding: calc(var(--padding-buttons) * 0.8571) var(--padding-buttons);
  font-family: var(--font-body);
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.1rem;
  background-color: var(--color-header-background);
  border-radius: var(--border-radius-button);
  border: var(--border-light);
  vertical-align: middle;
  column-gap: var(--padding-buttons);
  margin: 0;
  box-sizing: border-box;
  text-align: left;
  max-width: 100%;
  flex-shrink: 0;
}
input:disabled, button:disabled, textarea:disabled, select:disabled, a.button:disabled {
  color: var(--color-text-semi-transparent);
}
input:focus, button:focus, textarea:focus, select:focus, a.button:focus {
  background-color: white;
  border-color: transparent;
  box-shadow: var(--box-shadow-medium);
  outline: var(--outline-buttons);
  outline-offset: -0.5px;
}
input:hover, button:hover, textarea:hover, select:hover, a.button:hover {
  box-shadow: var(--box-shadow-medium);
}

input::placeholder, textarea::placeholder, select::placeholder {
  color: var(--color-text-semi-transparent);
  opacity: 1;
  font-size: inherit;
  font-weight: normal;
}
input:read-only:focus, textarea:read-only:focus, select:read-only:focus {
  background-color: var(--color-header-background);
}

a.button {
  text-decoration: none;
}

input[type=number] {
  padding-right: 0;
  width: 4em;
  box-sizing: content-box;
}
input[type=checkbox] {
  padding: 0;
  width: 1.1rem;
  height: 1.1rem;
  cursor: pointer;
}
input[type=checkbox]:checked {
  background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 -960 960 960' width='24' height='24' fill='%2324292f'><path d='M382-221.912 135.912-468l75.653-75.653L382-373.218l366.435-366.435L824.088-664 382-221.912Z'></path></svg>");
  background-size: 1em;
  background-position: center;
  background-repeat: no-repeat;
}
input[type=radio] {
  padding: 0;
  width: 1.1rem;
  height: 1.1rem;
  border-radius: 50%;
  cursor: pointer;
}
input[type=radio]:checked {
  background-image: radial-gradient(transparent 0%, transparent 30%, var(--color-text-light) 40%);
}
input[type=radio]:checked:hover, input[type=radio]:checked:focus {
  background-image: radial-gradient(white 0%, white 30%, var(--color-text-light) 45%);
}
input:is([type=text], [type=search], [type=email], [type=password], [type=tel], [type=url]) {
  width: 200px;
  min-width: 12ch;
}
input:is([type=text], [type=search], [type=email], [type=password], [type=tel], [type=url]).wide {
  width: 18rem;
}
input:is([type=text], [type=search], [type=email], [type=password], [type=tel], [type=url]).full-width {
  width: 100%;
}
input[type=color] {
  padding: 0;
  box-sizing: content-box;
}
input[type=range] {
  appearance: auto;
  padding: 0;
  background-color: transparent !important;
  cursor: pointer;
  border: none;
  box-shadow: none !important;
  color: var(--color-text-light);
  box-sizing: border-box;
  width: 100%;
  accent-color: var(--color-text-light);
}
input[type=range]::-webkit-slider-runnable-track {
  border: var(--border-light);
  border-radius: 3px;
  height: 6px;
}
input[type=range]::-webkit-slider-thumb {
  margin-top: -6px;
  background-color: var(--color-text-light);
  border-radius: 50%;
  border: none;
  height: 16px;
  width: 16px;
}
input[type=range]:focus {
  outline: none;
}
input[type=range]:focus::-webkit-slider-thumb {
  outline: var(--outline-buttons);
  outline-offset: -0.5px;
  box-shadow: var(--box-shadow-medium);
}
input[type=range]:hover::-webkit-slider-thumb {
  box-shadow: var(--box-shadow-medium);
}
input[type=range] + datalist {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
  font-size: 0.75rem;
  box-sizing: border-box;
  width: 100%;
  padding: 0 8px;
}
input[type=range] + datalist option {
  text-align: center;
  white-space: normal;
  overflow-wrap: anywhere;
  padding: 2px 4px 0 4px;
  grid-column: span 2;
}
input[type=range] + datalist option:first-child {
  padding-left: 0;
  text-align: left;
  margin-left: -2px;
  grid-column: span 1;
}
input[type=range] + datalist option:last-child {
  padding-right: 0;
  text-align: right;
  margin-right: -2px;
  grid-column: span 1;
}

textarea {
  width: 100%;
  min-height: calc(var(--padding-buttons) + 1rem + var(--padding-buttons));
}

textarea, select {
  scrollbar-width: thin;
  scrollbar-color: var(--scrollbar-foreground) var(--scrollbar-background);
}
textarea::-webkit-scrollbar, select::-webkit-scrollbar {
  height: 5px;
  width: 5px;
  border-radius: 2px;
}
textarea::-webkit-scrollbar-thumb, select::-webkit-scrollbar-thumb {
  background-color: var(--color-scrollbar-foreground);
  border-radius: 2px;
}
textarea::-webkit-scrollbar-track, select::-webkit-scrollbar-track {
  background-color: var(--color-scrollbar-background);
}

button, input[type=submit], a.button {
  text-align: center;
  width: auto;
  cursor: pointer;
  font-weight: 600;
  font-size: 0.75rem;
  justify-content: center;
  align-items: center;
}
button:hover, input[type=submit]:hover, a.button:hover {
  background-color: var(--color-link-background-hover);
}
button:focus, input[type=submit]:focus, a.button:focus {
  background-color: var(--color-link-background-hover);
  border-color: transparent;
  outline: var(--outline-buttons);
  box-shadow: var(--box-shadow-medium);
}
button.transparent, input[type=submit].transparent, a.button.transparent {
  font-weight: 400;
  background-color: transparent;
}
button.right-icon, input[type=submit].right-icon, a.button.right-icon {
  flex-direction: row-reverse;
}
button.success, input[type=submit].success, a.button.success {
  background-color: var(--color-success) !important;
  color: white;
}
button.error, input[type=submit].error, a.button.error {
  background-color: var(--color-error) !important;
  color: white;
}
button.warning, input[type=submit].warning, a.button.warning {
  background-color: var(--color-warning) !important;
  color: white;
}
button.info, input[type=submit].info, a.button.info {
  background-color: var(--color-info) !important;
  color: white;
}

button, a.button {
  /* Default:
  &.small {
      padding: 0.5em .6em;
      font-size: .75rem;
  }
  */
}
button[class^=icon-]:before, button[class*=" icon-"]:before, button span[class^=icon-]:before, a.button[class^=icon-]:before, a.button[class*=" icon-"]:before, a.button span[class^=icon-]:before {
  display: block;
  font-size: 1.3333em;
  line-height: inherit;
  margin: 0;
}
button.full-width, a.button.full-width {
  width: 100%;
}
button.medium, a.button.medium {
  padding: 0.625em 0.75em;
  font-size: 0.875rem;
}
button.large, a.button.large {
  padding: 0.75em 0.9em;
  font-size: 1rem;
}
button.x-large, a.button.x-large {
  padding: 0.875em 1.05em;
  font-size: 1.125rem;
}
button.xx-large, a.button.xx-large {
  padding: 1em 1.2em;
  font-size: 1.25rem;
}

select {
  cursor: pointer;
}
select.full-width {
  width: 100%;
}
select:not([multiple]) {
  background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='%2324292f'><path d='M7.406 8.578l4.594 4.594 4.594-4.594 1.406 1.406-6 6-6-6z'></path></svg>");
  background-size: 1em;
  background-position: calc(100% - var(--padding-buttons)) 50%;
  background-repeat: no-repeat;
  padding-right: calc(var(--padding-buttons) * 2 + 1em);
}
select:not([multiple]):hover, select:not([multiple]):focus {
  background-color: var(--color-link-background-hover);
}
select:not([multiple]) option {
  background: white;
  /* Not working - some option properties are styled by the OS
  &:first-child {
      padding-top: var(--padding-buttons);
      border-top-left-radius: var(--border-radius-button);
      border-top-right-radius: var(--border-radius-button);
  }

  &:last-child {
      padding-bottom: var(--padding-buttons);
      border-bottom-left-radius: var(--border-radius-button);
      border-bottom-right-radius: var(--border-radius-button);
  }
  */
}
select[multiple] {
  padding: calc(var(--padding-buttons) * 0.8571 - 3px) 0;
  overflow: visible auto;
}
select[multiple] option {
  padding: 2px var(--padding-buttons);
  background-color: transparent;
}
select[multiple] option:checked {
  background-color: white;
  border: var(--border-medium);
  border-radius: 1em;
}

/*
    Input elements cannot have :before or :after content. 
    So to apply an icon, wrap the element in a <label> tag.
*/
label:not([for])[class^=icon-]:before, label:not([for])[class*=" icon-"]:before {
  position: absolute;
  margin: 0 0 0 calc(var(--padding-buttons) + 1px);
  font-size: 1rem;
  color: var(--color-text-light);
  z-index: 1;
}
label:not([for])[class^=icon-] > input, label:not([for])[class^=icon-] > textarea, label:not([for])[class^=icon-] > select, label:not([for])[class*=" icon-"] > input, label:not([for])[class*=" icon-"] > textarea, label:not([for])[class*=" icon-"] > select {
  padding-left: calc(var(--padding-buttons) * 2 + 1rem);
}
label:not([for])[class^=icon-]:has(> textarea):before, label:not([for])[class*=" icon-"]:has(> textarea):before {
  margin-top: var(--padding-buttons);
}
label:not([for])[class^=icon-]:has(> select[multiple]):before, label:not([for])[class*=" icon-"]:has(> select[multiple]):before {
  margin-top: var(--padding-buttons);
}

label {
  position: relative;
  display: inline-flex;
  align-items: center;
  font-size: inherit;
  line-height: inherit;
  margin: 0;
  padding: 0;
  cursor: text;
  vertical-align: top;
}
label + a.button {
  vertical-align: top;
}
label:has(> input[type=submit], > select) {
  cursor: pointer;
}
label:has(> textarea) {
  width: 100%;
  align-items: flex-start;
}
label:has(> input.full-width) {
  width: 100%;
}
label:has(> select[multiple]) {
  align-items: flex-start;
}
label > input + a[class^=icon-]:empty, label > input + a[class*=" icon-"]:empty, label > textarea + a[class^=icon-]:empty, label > textarea + a[class*=" icon-"]:empty, label > select + a[class^=icon-]:empty, label > select + a[class*=" icon-"]:empty {
  display: inline-flex;
  position: absolute;
  right: calc(var(--padding-buttons) + 1px);
  margin: 0;
  text-decoration: none;
  border-radius: var(--border-radius-button);
}
label > input + a[class^=icon-]:empty:before, label > input + a[class*=" icon-"]:empty:before, label > textarea + a[class^=icon-]:empty:before, label > textarea + a[class*=" icon-"]:empty:before, label > select + a[class^=icon-]:empty:before, label > select + a[class*=" icon-"]:empty:before {
  font-size: 1rem;
  color: var(--color-text-light);
  margin: 0;
}
label > input + a[class^=icon-]:empty:hover, label > input + a[class^=icon-]:empty:focus, label > input + a[class*=" icon-"]:empty:hover, label > input + a[class*=" icon-"]:empty:focus, label > textarea + a[class^=icon-]:empty:hover, label > textarea + a[class^=icon-]:empty:focus, label > textarea + a[class*=" icon-"]:empty:hover, label > textarea + a[class*=" icon-"]:empty:focus, label > select + a[class^=icon-]:empty:hover, label > select + a[class^=icon-]:empty:focus, label > select + a[class*=" icon-"]:empty:hover, label > select + a[class*=" icon-"]:empty:focus {
  text-decoration: none;
}
label > input + a[class^=icon-]:empty:hover:before, label > input + a[class*=" icon-"]:empty:hover:before, label > textarea + a[class^=icon-]:empty:hover:before, label > textarea + a[class*=" icon-"]:empty:hover:before, label > select + a[class^=icon-]:empty:hover:before, label > select + a[class*=" icon-"]:empty:hover:before {
  color: var(--color-link);
}
label > input:has(+ a[class^=icon-]:empty, + a[class*=" icon-"]:empty), label > textarea:has(+ a[class^=icon-]:empty, + a[class*=" icon-"]:empty), label > select:has(+ a[class^=icon-]:empty, + a[class*=" icon-"]:empty) {
  padding-right: calc(var(--padding-buttons) * 2 + 1rem);
}
label > textarea + a[class^=icon-]:empty, label > textarea + a[class*=" icon-"]:empty {
  margin-top: var(--padding-buttons);
}
label > select[multiple] + a[class^=icon-]:empty, label > select[multiple] + a[class*=" icon-"]:empty {
  margin-top: var(--padding-buttons);
}
label > select:not([multiple]):has(+ a[class^=icon-]:empty, + a[class*=" icon-"]:empty) {
  padding-right: calc(var(--padding-buttons) * 3 + 1rem + 1em);
  background-position-x: calc(100% - 1rem - var(--padding-buttons) * 2);
}
label > :is(input[type=checkbox], input[type=radio]) {
  margin-right: 1ch;
}

form {
  font-size: 0.875rem;
  line-height: calc(var(--padding-buttons) + 1.1rem + var(--padding-buttons) + 4px);
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}

input.input-validation-error, textarea.input-validation-error, select.input-validation-error {
  border-color: rgba(176, 16, 48, 0.5);
  background-color: rgba(176, 16, 48, 0.05) !important;
  outline-color: rgba(176, 16, 48, 0.9);
}

span.field-validation-error {
  color: #b01030;
  font-size: 0.75rem;
  display: block;
  margin: 0.5em 0 0 0.5em;
}
span.field-validation-error:before {
  font-family: "jm-admin" !important;
  content: "\e902";
  display: inline-block;
  margin: 0 0.5em 0 0;
  font-size: 0.875rem;
  line-height: 1;
  opacity: 0.8;
}

.validation-inline span.field-validation-error {
  display: inline-block;
}

label:not([for])[class^=icon-]:has(> input.input-validation-error, > textarea.input-validation-error, > select.input-validation-error):before, label:not([for])[class*=" icon-"]:has(> input.input-validation-error, > textarea.input-validation-error, > select.input-validation-error):before {
  color: rgba(176, 16, 48, 0.8);
}

header:has(+ textarea) {
  display: block;
  padding: calc(var(--padding-buttons) * 0.8571) var(--padding-buttons);
  border-top-right-radius: var(--border-radius-button);
  border-top-left-radius: var(--border-radius-button);
  border: var(--border-light);
  margin: 0;
}
header + textarea {
  display: block;
  border-top: none;
  border-top-right-radius: 0;
  border-top-left-radius: 0;
  resize: vertical;
  outline-offset: -2px !important;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}
header + textarea + span.field-validation-error {
  display: block;
  margin: calc(0.5em - var(--margin-paragraph-bottom)) 0 var(--margin-paragraph-bottom) 0;
}

section.content.dark input, section.content.dark textarea, section.content.dark select {
  background-color: white !important;
}
section.content.dark button:not(.info, .success, .warning, .error), section.content.dark a.button:not(.info, .success, .warning, .error) {
  background-color: white !important;
}
section.content.dark button.transparent, section.content.dark input[type=submit].transparent, section.content.dark a.button.transparent {
  background-color: rgba(255, 255, 255, 0.7) !important;
}

/*---------------------------------------------------------------------------*\

    Loader

    Mandatory code to be included in the main scss file.

    Animated graphics to display while loading content.

\*---------------------------------------------------------------------------*/
.loading:after {
  content: "";
  display: inline-block;
  box-sizing: border-box;
  width: 1em;
  height: 1em;
  border: min(4px, 0.15em) solid rgba(0, 0, 0, 0.2);
  border-bottom-color: var(--color-link);
  border-radius: 50%;
  animation: loading-rotation 1s linear infinite;
  margin: 0 0.5em 0 0.5em;
}
.loading:after:is(article, aside, section, div, form) {
  display: block;
  width: 30px;
  height: 30px;
  margin: 5px auto;
  border-width: 4px;
}

@keyframes loading-rotation {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
/*---------------------------------------------------------------------------*\

    Data table

    Mandatory code to be included in the main scss file.

    Display sets of data across rows and columns.

\*---------------------------------------------------------------------------*/
/*

    Future updates when supported: Use container style query for key column

    Container style queries is not yet supported by FireFox. That's why this method is not in production. 
    https://bugzilla.mozilla.org/show_bug.cgi?id=1795622

// Custom property: Key column
@property --key-column {
    syntax: "<integer>";
    inherits: true;
    initial-value: 1;
}
// Container query
@container style(--key-column) {
    div.data {
        border: 3px solid red; // For testing
        grid-template-columns: repeat(calc(var(--key-column) - 1), minmax(min-content, max-content)) minmax(var(--key-column-min-width), auto) repeat(calc(var(--columns) - var(--key-column)), minmax(min-content, max-content));
    }
}
*/
div.data {
  --columns: 100;
  --key-column: 1;
  --key-column-min-width: min-content;
  display: grid;
  grid-template-columns: minmax(var(--key-column-min-width), auto) repeat(var(--columns), minmax(min-content, max-content));
  grid-template-rows: auto;
  grid-row-gap: 0;
  grid-column-gap: 0;
  background-color: transparent;
  border-radius: var(--border-radius-button);
  font-size: 0.875rem;
  font-weight: 400;
  line-height: 1.3;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
  align-items: stretch;
}
div.data div.item {
  display: contents;
}
div.data div.item > * {
  background-color: white;
  padding: var(--padding-buttons);
  margin-bottom: 0;
  border-bottom: var(--border-light);
}
div.data div.item > *:first-child {
  grid-column: 1;
  border-left: var(--border-light);
}
div.data div.item > *:last-child {
  border-right: var(--border-light);
}
div.data div.item > *.sorted {
  padding-left: calc(1.7142em + var(--padding-buttons));
}
div.data div.item > *:not(:last-child):empty[class^=icon-], div.data div.item > *:not(:last-child):empty[class*=" icon-"] {
  padding-right: 0;
}
div.data div.item > * > *:last-child {
  margin-bottom: 0;
}
div.data div.item:first-child > * {
  border-top: var(--border-light);
}
div.data div.item [class^=icon-]:before, div.data div.item [class*=" icon-"]:before {
  vertical-align: top;
}
div.data div.item:hover > * {
  background-color: rgba(0, 0, 0, 0.02);
}
div.data div.item:first-child > *:first-child {
  border-top-left-radius: var(--border-radius-button);
}
div.data div.item:first-child > *:last-child {
  border-top-right-radius: var(--border-radius-button);
}
div.data div.item:last-child > *:first-child {
  border-bottom-left-radius: var(--border-radius-button);
}
div.data div.item:last-child > *:last-child {
  border-bottom-right-radius: var(--border-radius-button);
}
div.data div.item.headings > * {
  font-weight: 600;
}
div.data div.item.headings a {
  color: var(--color-text);
}
div.data div.item a.align {
  display: inline-flex !important;
}
div.data div.item > details:last-child {
  text-align: right;
}
div.data div.item > details:last-child > nav {
  right: var(--padding-buttons);
}
div.data div.item > details:last-child > nav a {
  white-space: nowrap;
}
div.data > header {
  grid-column: 1/-1;
  padding: var(--padding-buttons);
  border-left: var(--border-light);
  border-right: var(--border-light);
}
div.data > header:first-child {
  border-top: var(--border-light);
  border-top-right-radius: var(--border-radius-button);
  border-top-left-radius: var(--border-radius-button);
}
div.data.list {
  grid-template-columns: repeat(var(--columns), minmax(min-content, max-content));
}
@media screen and (max-width: 599px) {
  div.data.collapse {
    display: block;
  }
  div.data.collapse div.item {
    display: block;
    position: relative;
    border-top: none;
    border-right: var(--border-light);
    border-bottom: var(--border-light);
    border-left: var(--border-light);
    padding-top: var(--padding-buttons);
    padding-bottom: calc(var(--padding-buttons) - 0.15em);
  }
  div.data.collapse div.item > * {
    border: none;
    padding-top: 0;
    padding-bottom: 0.15em;
    text-align: left !important;
  }
  div.data.collapse div.item > *.sorted {
    padding-left: var(--padding-buttons);
  }
  div.data.collapse div.item > *[data-collapse]:before {
    content: attr(data-collapse) ": ";
    color: var(--color-text-light);
    font-size: 0.75rem;
  }
  div.data.collapse div.item:hover {
    background-color: rgba(27, 31, 36, 0.03);
  }
  div.data.collapse div.item:hover > * {
    background-color: transparent;
  }
  div.data.collapse div.item:first-child {
    border-top: var(--border-light);
    border-top-right-radius: var(--border-radius-button);
    border-top-left-radius: var(--border-radius-button);
  }
  div.data.collapse div.item:first-child > *:first-child {
    border-top-right-radius: var(--border-radius-button);
    border-top-left-radius: var(--border-radius-button);
  }
  div.data.collapse div.item:last-child {
    border-bottom-right-radius: var(--border-radius-button);
    border-bottom-left-radius: var(--border-radius-button);
  }
  div.data.collapse div.item:last-child > *:last-child {
    border-bottom-right-radius: var(--border-radius-button);
    border-bottom-left-radius: var(--border-radius-button);
  }
  div.data.collapse div.item.headings {
    display: none;
  }
  div.data.collapse div.item.headings:first-child + div.item {
    border-top: var(--border-light);
    border-top-right-radius: var(--border-radius-button);
    border-top-left-radius: var(--border-radius-button);
  }
  div.data.collapse div.item.headings:first-child + div.item > *:first-child {
    border-top-right-radius: var(--border-radius-button);
    border-top-left-radius: var(--border-radius-button);
  }
  div.data.collapse div.item > details:last-child {
    position: absolute;
    top: var(--padding-buttons);
    right: var(--padding-buttons);
    padding: 0;
    background-color: transparent;
  }
  div.data.collapse div.item > details:last-child > nav {
    right: 0;
  }
  div.data.collapse div.item:has(> details:last-child) > *:first-child {
    padding-right: calc(var(--padding-buttons) * 2 + 1em);
  }
}
div.data.change-key-column {
  grid-template-columns: repeat(max(var(--key-column) - 1, 1), minmax(min-content, max-content)) minmax(var(--key-column-min-width), auto) repeat(max(var(--columns) - var(--key-column), 1), minmax(min-content, max-content));
}
div.data.change-key-column.list {
  grid-template-columns: repeat(max(var(--key-column) - 1, 1), minmax(min-content, max-content)) minmax(var(--key-column-min-width), max-content) repeat(max(var(--columns) - var(--key-column), 1), minmax(min-content, max-content));
}
div.data.break-key-column-overflow, div.data.clip-key-column-overflow {
  --key-column-min-width: 3ch;
}
div.data.break-key-column-overflow div.item > * {
  overflow-wrap: break-word;
  overflow-x: hidden;
}
div.data.clip-key-column-overflow div.item > * {
  text-overflow: ellipsis;
  overflow-x: hidden;
}

div.data + section.align.pagination {
  padding-right: var(--padding-buttons);
}

section.align.sorting {
  font-size: 0.875rem;
  padding: 0 0 0 var(--padding-buttons);
}
section.align.sorting.right {
  padding: 0 var(--padding-buttons) 0 0;
  margin: 0 0 var(--padding-buttons) 0;
}
section.align.sorting a {
  color: inherit;
}

section.content.dark div.data div.item:hover > * {
  background-color: rgba(255, 255, 255, 0.7);
}

/*---------------------------------------------------------------------------*\

    Breakpoints visibility

    Mandatory code to be included in the main scss file.

    Show content depending on screen width, according to the breakpoints. 
    The content will be hidden if the breakpoint is not matched. Works with 
    all breakpoints in the theme.

\*---------------------------------------------------------------------------*/
@media screen and (min-width: 600px) {
  .show-for-phone-only {
    display: none !important;
  }
}

@media screen and (max-width: 599px) {
  .show-for-tablet-portrait-up {
    display: none !important;
  }
}

@media screen and (max-width: 599px) {
  .show-for-tablet-portrait-only {
    display: none !important;
  }
}
@media screen and (min-width: 900px) {
  .show-for-tablet-portrait-only {
    display: none !important;
  }
}

@media screen and (max-width: 599px) {
  .show-for-tablet-landscape-up {
    display: none !important;
  }
}
@media screen and (min-width: 600px) and (max-width: 899px) {
  .show-for-tablet-landscape-up {
    display: none !important;
  }
}

@media screen and (max-width: 599px) {
  .show-for-tablet-landscape-only {
    display: none !important;
  }
}
@media screen and (min-width: 600px) and (max-width: 899px) {
  .show-for-tablet-landscape-only {
    display: none !important;
  }
}
@media screen and (min-width: 1200px) {
  .show-for-tablet-landscape-only {
    display: none !important;
  }
}

@media screen and (max-width: 599px) {
  .show-for-desktop-up {
    display: none !important;
  }
}
@media screen and (min-width: 600px) and (max-width: 899px) {
  .show-for-desktop-up {
    display: none !important;
  }
}
@media screen and (min-width: 900px) and (max-width: 1199px) {
  .show-for-desktop-up {
    display: none !important;
  }
}

@media screen and (max-width: 599px) {
  .show-for-desktop-only {
    display: none !important;
  }
}
@media screen and (min-width: 600px) and (max-width: 899px) {
  .show-for-desktop-only {
    display: none !important;
  }
}
@media screen and (min-width: 900px) and (max-width: 1199px) {
  .show-for-desktop-only {
    display: none !important;
  }
}
@media screen and (min-width: 1800px) {
  .show-for-desktop-only {
    display: none !important;
  }
}

@media screen and (max-width: 599px) {
  .show-for-big-desktop-up {
    display: none !important;
  }
}
@media screen and (min-width: 600px) and (max-width: 899px) {
  .show-for-big-desktop-up {
    display: none !important;
  }
}
@media screen and (min-width: 900px) and (max-width: 1199px) {
  .show-for-big-desktop-up {
    display: none !important;
  }
}
@media screen and (min-width: 1200px) and (max-width: 1799px) {
  .show-for-big-desktop-up {
    display: none !important;
  }
}

/*---------------------------------------------------------------------------*\

    Top header

    Mandatory code to be included in the main scss file.

    Styles for the header displayed at the top of each page. This area 
    usually contains logotype and important links, e.g. user profile.

\*---------------------------------------------------------------------------*/
body > header {
  position: static;
  padding: var(--padding-container-vertical) var(--padding-container-horizontal);
  display: grid;
  grid-template-columns: max-content 1fr max-content;
  align-items: center;
  grid-column-gap: var(--grid-gap);
  grid-row-gap: var(--padding-container-vertical);
  background: var(--color-top-header-background);
  color: var(--color-top-header-foreground);
}
body > header img {
  vertical-align: middle;
}
body > header a.image {
  padding: 0;
  border-radius: 0;
}
body > header a.image:hover, body > header a.image:focus {
  background-color: transparent !important;
}
body > header > div > a, body > header > div > nav > a, body > header summary {
  color: var(--color-top-header-foreground) !important;
  text-decoration: none;
  padding: var(--padding-buttons);
  border-radius: var(--border-radius-button);
  line-height: inherit !important;
}
body > header > div > a:hover, body > header > div > a:focus, body > header > div > nav > a:hover, body > header > div > nav > a:focus, body > header summary:hover, body > header summary:focus {
  color: var(--color-top-header-link-foreground-hover) !important;
  background-color: var(--color-top-header-link-background-hover) !important;
  text-decoration: none;
}
body > header > div:nth-child(2) > a:last-of-type {
  font-weight: 600;
}
@media screen and (max-width: 599px) {
  body > header > div:nth-child(2) span:first-of-type {
    display: block;
    height: 0;
    line-height: 0;
    font-size: 0;
  }
  body > header > div:nth-child(2) > a {
    padding: 0.12em 0.25em;
    line-height: 1.1em;
  }
  body > header > div:nth-child(2) > a:first-of-type {
    font-size: 92.85%;
  }
}
body > header > div:nth-child(3) {
  white-space: nowrap;
}
body > header > div.horizontal-tabs {
  grid-column: 1/-1;
  margin: 0 calc(var(--padding-container-horizontal) * -1);
}
body > header > div.horizontal-tabs > nav > a:first-child, body > header > div.horizontal-tabs > nav > details:first-child {
  margin-left: var(--padding-container-horizontal);
}
body > header > div.horizontal-tabs > nav > a:last-child, body > header > div.horizontal-tabs > nav > details:last-child {
  margin-right: var(--padding-container-horizontal);
}
body > header:has(> div.horizontal-tabs:last-child) {
  padding-bottom: 0;
}

/*---------------------------------------------------------------------------*\

    Horizontal tabs

    Optional component, to be included in the main scss file.

    Horizontal tab style navigation, with sideways scrolling when needed. 
    This component is usually displayed in a header section and used for 
    navigation links related to the current page. 

    Features:

    - Menu items are visible on a single line.

    - Horizontal "snappy" scrolling if needed.

    - Menu items can be links (<a>) or grouped links (<details>), displayed 
      in a dropdown menu.

     - Menu items can have an icon, via the themes icon font (class="icon-…).

    - Menu items can be marked to show the current location (class="current").

    Influenced by Material Design and Adam Argyle:
    https://web.dev/building-a-tabs-component/

\*---------------------------------------------------------------------------*/
html, body {
  overflow-x: hidden;
}

.horizontal-tabs {
  --color-link-current-border: #fd8c73;
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
  min-block-size: fit-content;
  padding: 0;
  align-items: flex-start;
  overflow: auto hidden;
  min-block-size: fit-content;
  overscroll-behavior-x: contain;
  scroll-snap-type: x mandatory;
  scrollbar-width: thin;
  scrollbar-color: var(--color-scrollbar-foreground) var(--color-scrollbar-background);
}
.horizontal-tabs::-webkit-scrollbar {
  height: 4px;
  width: 4px;
}
.horizontal-tabs::-webkit-scrollbar-thumb:horizontal {
  background-color: rgba(0, 0, 0, 0.2);
  -webkit-border-radius: 4px;
}
.horizontal-tabs::-webkit-scrollbar-button:start:decrement, .horizontal-tabs::-webkit-scrollbar-button:end:increment {
  height: 4px;
  display: block;
}
.horizontal-tabs > nav {
  display: flex;
}
.horizontal-tabs > nav > a, .horizontal-tabs > nav > details summary {
  color: var(--color-text);
  text-decoration: none;
  padding: var(--padding-buttons);
  border-radius: var(--border-radius-button);
  line-height: inherit !important;
}
.horizontal-tabs > nav > a:hover, .horizontal-tabs > nav > a:focus, .horizontal-tabs > nav > details summary:hover, .horizontal-tabs > nav > details summary:focus {
  background-color: var(--color-link-background-hover);
  text-decoration: none;
}
.horizontal-tabs > nav > a, .horizontal-tabs > nav > details {
  position: static;
  margin: 2px 0 0 var(--padding-buttons);
  vertical-align: bottom;
  scroll-snap-align: start;
}
@media screen and (max-width: 599px) {
  .horizontal-tabs > nav > a, .horizontal-tabs > nav > details {
    font-size: 0.8125rem;
  }
}
.horizontal-tabs > nav > a {
  display: inline-flex;
  align-items: center;
}
.horizontal-tabs > nav > details summary[class^=icon-], .horizontal-tabs > nav > details summary[class*=" icon-"] {
  display: inline-flex;
  align-items: center;
}
.horizontal-tabs > nav > details > nav {
  font-size: inherit;
  min-width: min-content;
}
.horizontal-tabs > nav > details > nav.open {
  transition: 0.1s left;
}
.horizontal-tabs > nav > a, .horizontal-tabs > nav > details summary {
  white-space: nowrap;
  outline-offset: -2px;
  background-clip: padding-box;
  border-bottom: 2px solid transparent;
}
.horizontal-tabs > nav > a.current, .horizontal-tabs > nav > details.current summary {
  border-bottom-color: var(--color-link-current-border);
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}
.horizontal-tabs > nav details nav a.current:before {
  content: "";
  display: block;
  position: absolute;
  height: 1.2em;
  overflow: hidden;
  border-left: 2px solid var(--color-link-current-border);
  margin: 0.1em 0 0 calc(var(--padding-buttons) * -1);
}
.horizontal-tabs > nav details.current[open] summary {
  border-bottom: none;
}
@supports (contain: layout) {
  .horizontal-tabs > nav > a, .horizontal-tabs > nav > details {
    margin-bottom: 2px;
  }
  .horizontal-tabs > nav > a, .horizontal-tabs > nav > details summary {
    border-bottom: none !important;
  }
  .horizontal-tabs > nav > a.current, .horizontal-tabs > nav > details.current summary {
    border-bottom-left-radius: var(--border-radius-button);
    border-bottom-right-radius: var(--border-radius-button);
  }
  .horizontal-tabs > nav > a.current, .horizontal-tabs > nav > details.current {
    contain: layout;
  }
  .horizontal-tabs > nav > a.current:after, .horizontal-tabs > nav > details.current:after {
    content: "";
    display: block;
    position: absolute;
    height: 0;
    overflow: hidden;
    border: 1px solid var(--color-link-current-border);
    border-radius: 1px;
    bottom: -2px;
    left: var(--padding-buttons);
    right: var(--padding-buttons);
  }
  .horizontal-tabs > nav details[open] {
    contain: none;
  }
  .horizontal-tabs > nav details[open]:after {
    content: none;
  }
}
@media (prefers-reduced-motion: no-preference) {
  .horizontal-tabs {
    scroll-behavior: smooth;
  }
}

/*---------------------------------------------------------------------------*\

    Badge

    Optional component, to be included in the main scss file.

    Block style label, link or navigation. This component is usually used to 
    indicate a status, notification or event related to the current page.

    Features:

    - Can be text only (<span>), link (<a>) or grouped links (<details>), displayed 
      in a dropdown menu.

    - Can have an icon, via the themes icon font (class="icon-…).

    - Can include a separate label (<label>), usually used to display values.

    - Can be text only, icon only or both. All variants works with the 
      optional label.

    - Supports alert colors.

    CSS only, no Javascript. Opening/closing of the dropdown menu works with 
    keyboard, mouse and touch.

\*---------------------------------------------------------------------------*/
span.badge, a.badge, details.badge summary {
  display: inline-flex;
  color: var(--color-text);
  padding: var(--padding-buttons);
  font-size: 0.75rem;
  line-height: 1rem;
  font-weight: 600;
  background-color: var(--color-header-background);
  border-radius: var(--border-radius-button);
  border: var(--border-light);
  vertical-align: middle;
  column-gap: var(--padding-buttons);
  margin: 0;
  align-items: flex-start;
}
span.badge[class^=icon-]:before, span.badge[class*=" icon-"]:before, a.badge[class^=icon-]:before, a.badge[class*=" icon-"]:before, details.badge summary[class^=icon-]:before, details.badge summary[class*=" icon-"]:before {
  display: inline-block;
  font-size: 1rem;
  line-height: 1rem;
  vertical-align: text-bottom;
  margin: 0;
}
span.badge > label, a.badge > label, details.badge summary > label {
  display: inline-block;
  font-size: inherit;
  line-height: inherit;
  background-color: white;
  margin: calc(1px - var(--padding-buttons) - 1px) 0 calc(1px - var(--padding-buttons) - 1px) 0 !important;
  padding: var(--padding-buttons);
  vertical-align: text-bottom;
  border-right: var(--border-light);
  border-left: var(--border-light);
}
span.badge > label:last-child, a.badge > label:last-child, details.badge summary > label:last-child {
  border-top-right-radius: var(--border-radius-button);
  border-bottom-right-radius: var(--border-radius-button);
  border-right: none;
  margin-right: calc(1px - var(--padding-buttons) - 1px);
}
span.badge > span[class^=icon-], span.badge > span[class*=" icon-"], a.badge > span[class^=icon-], a.badge > span[class*=" icon-"], details.badge summary > span[class^=icon-], details.badge summary > span[class*=" icon-"] {
  display: inline-block;
  font-size: 1rem;
  line-height: 1rem;
  height: 1rem;
  margin: 0;
  padding: 0;
  vertical-align: text-bottom;
}
span.badge > a, span.badge > span.notification, a.badge > a, a.badge > span.notification, details.badge summary > a, details.badge summary > span.notification {
  display: inline-block;
  font-size: 0.75rem;
  line-height: calc(1rem - 1px);
  margin: 0;
  padding: 0 2px;
  vertical-align: text-bottom;
  color: inherit;
  background-color: rgba(0, 0, 0, 0.08);
  min-width: 1rem;
  box-sizing: border-box;
  text-align: center;
  border-radius: 0.5rem;
  text-decoration: none;
}
span.badge > a[class^=icon-]:before, span.badge > a[class*=" icon-"]:before, span.badge > span.notification[class^=icon-]:before, span.badge > span.notification[class*=" icon-"]:before, a.badge > a[class^=icon-]:before, a.badge > a[class*=" icon-"]:before, a.badge > span.notification[class^=icon-]:before, a.badge > span.notification[class*=" icon-"]:before, details.badge summary > a[class^=icon-]:before, details.badge summary > a[class*=" icon-"]:before, details.badge summary > span.notification[class^=icon-]:before, details.badge summary > span.notification[class*=" icon-"]:before {
  font-size: inherit;
  line-height: 1rem;
  color: inherit;
}
span.badge > a:hover, span.badge > a:focus, a.badge > a:hover, a.badge > a:focus, details.badge summary > a:hover, details.badge summary > a:focus {
  background-color: var(--color-link-background-hover);
}

a.badge {
  outline-offset: -1px;
}
a.badge:hover, a.badge:focus {
  background-color: var(--color-link-background-hover);
  text-decoration: none;
}
a.badge:hover > label, a.badge:focus > label {
  background-color: var(--color-header-background);
}
a.badge > label {
  cursor: pointer;
}

details.badge {
  position: relative;
  display: inline-block;
  margin: 0;
}
details.badge summary {
  cursor: pointer;
  outline-offset: -1px;
  list-style: none;
}
details.badge summary:focus-visible {
  outline: var(--outline-buttons);
}
details.badge summary:after {
  font-family: "jm-admin" !important;
  content: "\e906";
  display: inline-block;
  transition: 0.2s transform;
  transform: translateY(0.1em);
}
details.badge summary[class^=icon-]:empty:after, details.badge summary[class*=" icon-"]:empty:after {
  transform: none;
  margin-left: -0.2em;
}
details.badge summary:empty:not([class^=icon-], [class*=" icon-"]):after {
  content: "\e91c";
  transition: none !important;
  transform: none !important;
}
details.badge summary:hover, details.badge summary:focus {
  background-color: var(--color-link-background-hover);
}
details.badge summary:hover > label, details.badge summary:focus > label {
  background-color: var(--color-header-background);
}
details.badge summary > label:last-child {
  border-right: var(--border-light);
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  margin-right: 0;
}
details.badge summary > label:last-child:after {
  content: none;
}
details.badge[open] summary:after {
  transform: rotate(90deg) translateX(0.1em);
}
details.badge[open] summary[class^=icon-]:empty:after, details.badge[open] summary[class*=" icon-"]:empty:after {
  transform: rotate(90deg);
}
details.badge nav {
  margin-top: 1px;
  width: 100%;
  min-width: min-content;
}

section.badges {
  line-height: calc(var(--padding-buttons) + 1rem + 6px);
}
section.badges[class^=icon-]:before, section.badges[class*=" icon-"]:before {
  vertical-align: middle;
  margin-right: 0.25em;
}

/*---------------------------------------------------------------------------*\

    Tag

    Optional component, to be included in the main scss file.

    A small label or link. This component is usually used to flag or indicate 
    a status to a subject.

    Features:

    - Can be text only (<span>) or a link (<a>).

    - Can have an icon, via the themes icon font (class="icon-…).

    - Can be in highlighted color (class="highlighted").

    - Supports alert colors.

\*---------------------------------------------------------------------------*/
.tag:where(span:not(.token), a) {
  display: inline-block;
  color: var(--color-text-light);
  padding: 1px 10px 2px 10px;
  font-size: 0.75rem;
  line-height: 1rem;
  font-weight: 500;
  background-color: var(--color-link-background-hover);
  border-radius: 1em;
  border: none;
  vertical-align: middle;
  margin: 0;
}
.tag:where(span:not(.token), a)[class^=icon-]:before, .tag:where(span:not(.token), a)[class*=" icon-"]:before {
  line-height: 1rem;
  vertical-align: text-bottom;
}
.tag:where(span:not(.token), a).highlighted {
  background-color: var(--color-tag-background);
  color: var(--color-link);
}

.tag:where(a) {
  outline-offset: -1px;
  text-decoration: none;
}
.tag:where(a):hover, .tag:where(a):focus {
  background-color: var(--color-text-semi-transparent);
  color: white;
  text-decoration: none;
}
.tag:where(a):where([class^="icon-"], &[class*=" icon-"]):empty:hover, .tag:where(a):where([class^="icon-"], &[class*=" icon-"]):empty:focus {
  color: white;
}
.tag:where(a).highlighted:hover, .tag:where(a).highlighted:focus {
  background-color: var(--color-link);
  color: white;
}

/*---------------------------------------------------------------------------*\

    Side navigation

    Optional component, to be included in the main scss file.

    Drawer style navigation, which slides in from the side of the page. This 
    component is used for an extra layer of navigation links, usually for top 
    level or external links. The menu is not visible on page load and requires 
    a click to open.

    CSS only, no Javascript. Opening/closing works with keyboard, mouse and 
    touch.

\*---------------------------------------------------------------------------*/
#side-navigation {
  position: absolute;
  z-index: -1;
}
#side-navigation + nav {
  --color-link-current-border: #1c7c37;
  position: absolute;
  top: 0;
  left: 0;
  width: auto;
  min-width: 5rem;
  max-width: 90vw;
  min-height: max(100vh, 100%);
  box-sizing: border-box;
  background: white;
  border-top: var(--border-medium);
  border-right: var(--border-medium);
  border-bottom: var(--border-medium);
  border-radius: 0 var(--border-radius-button) var(--border-radius-button) 0;
  padding: var(--padding-container-vertical) var(--padding-container-horizontal);
  box-shadow: var(--box-shadow-medium);
  transform: translate(-100%, 0);
  z-index: 9;
  display: flex;
  flex-direction: column;
  row-gap: var(--padding-buttons);
}
#side-navigation + nav > label {
  cursor: pointer;
}
#side-navigation + nav > label:empty {
  font-size: 18px;
  line-height: 1 !important;
  border-radius: var(--border-radius-button);
  text-align: center;
  align-self: flex-end;
}
#side-navigation + nav a, #side-navigation + nav label {
  display: block;
  margin: 0;
  color: var(--color-text-light);
  text-decoration: none;
  padding: var(--padding-buttons);
  border-radius: var(--border-radius-button);
  line-height: inherit !important;
}
#side-navigation + nav a:hover, #side-navigation + nav a:focus, #side-navigation + nav label:hover, #side-navigation + nav label:focus {
  background-color: var(--color-link-background-hover);
  text-decoration: none;
}
#side-navigation + nav a {
  visibility: hidden;
  position: relative;
}
#side-navigation + nav a.current {
  background-color: var(--color-link-background-hover);
  font-weight: 600;
}
#side-navigation + nav a.current:after {
  content: "";
  display: block;
  position: absolute;
  overflow: hidden;
  left: -8px;
  top: 3px;
  bottom: 3px;
  width: 4px;
  background-color: var(--color-link-current-border);
  border-radius: 2px;
}
#side-navigation + nav h5 {
  color: var(--color-text-light);
  padding: var(--padding-buttons);
  margin: 0;
}
#side-navigation + nav > hr {
  height: calc(var(--padding-buttons) * 2);
  line-height: calc(var(--padding-buttons) * 2);
  font-size: calc(var(--padding-buttons) * 2);
  margin: 0 0 var(--padding-buttons) 0;
}
#side-navigation:checked + nav {
  transition: 0.2s transform ease;
  transform: none;
}
#side-navigation:checked + nav a {
  visibility: visible;
}
#side-navigation:focus + nav {
  transition: 0.2s transform ease;
}
#side-navigation:focus-visible ~ header label[for=side-navigation] {
  background-color: var(--color-link-background-hover);
  outline: var(--outline-buttons);
  color: var(--color-text);
  border-color: var(--color-text-light);
}
#side-navigation:focus-visible + nav label[for=side-navigation] {
  background-color: var(--color-link-background-hover);
  outline: var(--outline-buttons);
  color: var(--color-text);
}

header label[for=side-navigation] {
  display: inline-block;
  padding: 0;
  font-size: 20px;
  line-height: 32px;
  vertical-align: middle;
  height: 32px;
  width: 32px;
  color: inherit;
  border-width: 1px;
  border-style: solid;
  border-color: var(--color-top-header-foreground);
  border-color: color-mix(in srgb, var(--color-top-header-foreground) 40%, transparent);
  text-align: center;
  box-sizing: border-box;
  border-radius: var(--border-radius-button);
  cursor: pointer;
  opacity: 0.8;
}
header label[for=side-navigation]:hover, header label[for=side-navigation]:focus {
  color: var(--color-top-header-link-foreground-hover);
  background-color: var(--color-top-header-link-background-hover);
  border-color: var(--color-top-header-link-background-hover);
  border-color: color-mix(in srgb, var(--color-top-header-link-foreground-hover) 40%, transparent);
  text-decoration: none;
  opacity: 1;
}
header label[for=side-navigation] + a {
  margin-left: calc(var(--grid-gap) + var(--padding-buttons));
}
@media screen and (max-width: 599px) {
  header label[for=side-navigation] + a {
    margin-left: var(--grid-gap);
  }
}

/*---------------------------------------------------------------------------*\

    Overlay labels

    Mandatory code to be included in the main scss file.

    Styles for text labels related to form elements.

    - Influenced by Material design 
      (https://m2.material.io/components/text-fields).

\*---------------------------------------------------------------------------*/
.overlay-label {
  position: relative;
}
.overlay-label :is(input[placeholder], select, textarea[placeholder]) ~ span:first-of-type {
  position: absolute;
  top: calc(var(--padding-buttons) * 0.8571);
  left: var(--padding-buttons);
  font-family: var(--font-body);
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.1rem;
  color: var(--color-text-light);
  transition: transform 0.1s, left 0.1s;
  max-width: 100%;
  overflow: hidden;
  transform: none;
  padding: 0;
  margin: 0;
}
.overlay-label :is(input[placeholder], select, textarea[placeholder]) ~ span:first-of-type:after {
  content: none;
}
.overlay-label :is(input[placeholder], select, textarea[placeholder])::placeholder {
  opacity: 0;
}
.overlay-label :is(input[placeholder], select, textarea[placeholder]):focus ~ span:first-of-type, .overlay-label :is(input[placeholder], select, textarea[placeholder]):not(:placeholder-shown) ~ span:first-of-type {
  left: var(--padding-buttons) !important;
  transform: translateY(-100%);
  font-size: 0.75rem;
  padding: 0 3px;
  margin: -1px 0 0 -2px;
  line-height: 1;
}
.overlay-label :is(input[placeholder], select, textarea[placeholder]):focus ~ span:first-of-type:after, .overlay-label :is(input[placeholder], select, textarea[placeholder]):not(:placeholder-shown) ~ span:first-of-type:after {
  content: "";
  display: block;
  position: absolute;
  overflow: hidden;
  top: 50%;
  left: 0;
  right: 0;
  z-index: -1;
  height: 2px;
  background-color: var(--color-header-background);
}
.overlay-label :is(input[placeholder], select, textarea[placeholder]):focus ~ span:first-of-type {
  color: var(--color-link);
}
.overlay-label :is(input[placeholder], select, textarea[placeholder]):focus ~ span:first-of-type:after {
  margin: -1px 0 0 0 !important;
  height: 3px !important;
  background-color: white !important;
}
.overlay-label :is(input[placeholder], select, textarea[placeholder]).input-validation-error ~ span:first-of-type {
  color: rgba(176, 16, 48, 0.6);
}
.overlay-label :is(input[placeholder], select, textarea[placeholder]).input-validation-error:focus ~ span:first-of-type, .overlay-label :is(input[placeholder], select, textarea[placeholder]).input-validation-error:hover ~ span:first-of-type, .overlay-label :is(input[placeholder], select, textarea[placeholder]).input-validation-error[value]:not([value=""]) ~ span:first-of-type, .overlay-label :is(input[placeholder], select, textarea[placeholder]).input-validation-error:not(:placeholder-shown) ~ span:first-of-type {
  color: rgba(176, 16, 48, 0.9);
}
.overlay-label label:not([for])[class^=icon-] > input[placeholder] ~ span:first-of-type, .overlay-label label:not([for])[class^=icon-] > select ~ span:first-of-type, .overlay-label label:not([for])[class^=icon-] textarea[placeholder] ~ span:first-of-type, .overlay-label label:not([for])[class*=" icon-"] > input[placeholder] ~ span:first-of-type, .overlay-label label:not([for])[class*=" icon-"] > select ~ span:first-of-type, .overlay-label label:not([for])[class*=" icon-"] textarea[placeholder] ~ span:first-of-type {
  left: calc(var(--padding-buttons) * 2 + 1rem);
}
.overlay-label .choices ~ span:first-of-type {
  position: absolute;
  top: calc(var(--padding-buttons) * 0.8571);
  left: var(--padding-buttons);
  font-family: var(--font-body);
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.1rem;
  color: var(--color-text-light);
  transition: transform 0.1s, left 0.1s;
  max-width: 100%;
  overflow: hidden;
  transform: none;
  padding: 0;
  margin: 0;
  left: var(--padding-buttons) !important;
  transform: translateY(-100%);
  font-size: 0.75rem;
  padding: 0 3px;
  margin: -1px 0 0 -2px;
  line-height: 1;
}
.overlay-label .choices ~ span:first-of-type:after {
  content: none;
}
.overlay-label .choices ~ span:first-of-type:after {
  content: "";
  display: block;
  position: absolute;
  overflow: hidden;
  top: 50%;
  left: 0;
  right: 0;
  z-index: -1;
  height: 2px;
  background-color: var(--color-header-background);
}
.overlay-label .choices[data-type=text]:not(.is-focused):has(input[value=""]:first-child) ~ span:first-of-type {
  position: absolute;
  top: calc(var(--padding-buttons) * 0.8571);
  left: var(--padding-buttons);
  font-family: var(--font-body);
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.1rem;
  color: var(--color-text-light);
  transition: transform 0.1s, left 0.1s;
  max-width: 100%;
  overflow: hidden;
  transform: none;
  padding: 0;
  margin: 0;
}
.overlay-label .choices[data-type=text]:not(.is-focused):has(input[value=""]:first-child) ~ span:first-of-type:after {
  content: none;
}
.overlay-label .choices[data-type=select-multiple]:not(.is-focused):not(:has(option)) ~ span:first-of-type {
  position: absolute;
  top: calc(var(--padding-buttons) * 0.8571);
  left: var(--padding-buttons);
  font-family: var(--font-body);
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.1rem;
  color: var(--color-text-light);
  transition: transform 0.1s, left 0.1s;
  max-width: 100%;
  overflow: hidden;
  transform: none;
  padding: 0;
  margin: 0;
}
.overlay-label .choices[data-type=select-multiple]:not(.is-focused):not(:has(option)) ~ span:first-of-type:after {
  content: none;
}
.overlay-label label:not([for])[class^=icon-] .choices:where([data-type="text"]:not(.is-focused):has(input[value=""]:first-child), [data-type="select-multiple"]:not(.is-focused):not(:has(option))) ~ span:first-of-type, .overlay-label label:not([for])[class*=" icon-"] .choices:where([data-type="text"]:not(.is-focused):has(input[value=""]:first-child), [data-type="select-multiple"]:not(.is-focused):not(:has(option))) ~ span:first-of-type {
  left: calc(var(--padding-buttons) * 3 + 0.875rem) !important;
}

/*---------------------------------------------------------------------------*\

    Vertical labels

    Mandatory code to be included in the main scss file.

    Styles for text labels related to form elements.

    - Influenced by Tailwind CSS form:  
      (https://v1.tailwindcss.com/components/forms).

\*---------------------------------------------------------------------------*/
.vertical-label {
  margin: 0 0 var(--margin-paragraph-bottom) 0;
  font-size: 0.875rem;
}
.vertical-label label[for] {
  display: block;
  font-weight: 600;
  line-height: 1.3;
  color: var(--color-text-light);
  padding: 0;
  margin: 0 0 var(--padding-buttons) 0;
}

section.content.dark.vertical-label label[for], section.content.dark .vertical-label label[for] {
  color: var(--color-text);
}

/*---------------------------------------------------------------------------*\

    Horizontal labels

    Mandatory code to be included in the main scss file.

    Styles for text labels related to form elements.

    - Influenced by Tailwind CSS inline form:  
      (https://v1.tailwindcss.com/components/forms).

\*---------------------------------------------------------------------------*/
.horizontal-label {
  display: grid;
  align-items: flex-start;
  grid-column-gap: calc(var(--padding-buttons) * 2);
  grid-template-columns: minmax(min-content, max-content) minmax(0, 1fr);
  margin: 0 0 var(--margin-paragraph-bottom) 0;
  font-size: 0.875rem;
}
.horizontal-label.center {
  grid-template-columns: minmax(min-content, max-content) minmax(0, max-content);
  justify-content: center;
}
.horizontal-label.right {
  grid-template-columns: minmax(min-content, max-content) minmax(0, max-content);
  justify-content: right;
}
.horizontal-label > label {
  display: inline-block;
  font-weight: 600;
  line-height: 1.3;
  color: var(--color-text-light);
  padding: 0;
  margin: 0;
}
.horizontal-label > label:has(+ input, + textarea, + select) {
  padding-top: calc(var(--padding-buttons) * 0.8571);
}
.horizontal-label > label:has(+ * input, + * textarea, + * select) {
  padding-top: calc(var(--padding-buttons) * 0.8571);
}
.horizontal-label > *:not(label) {
  grid-column: 2;
}
@media screen and (max-width: 599px) {
  .horizontal-label.collapse {
    display: block;
  }
  .horizontal-label.collapse > label {
    display: block;
    padding: 0;
    margin: 0 0 var(--padding-buttons) 0;
  }
}

section.content.dark.horizontal-label > label, section.content.dark .horizontal-label > label {
  color: var(--color-text);
}

/*---------------------------------------------------------------------------*\

    Flex grid

    Optional component, to be included in the main scss file.

    An intrinsically responsive grid layout. This component is usually used 
    for layout of content in the body of a page.

    Features:

    - CSS only, no Javascript.

    - Columns are automatically created, no class names needed.

    - Each column will resize at the same rate, and will begin to break to a 
      new row if the width reaches the minimum width value.

    - No "orphan" columns (by default). If the last column will break to a new row, it 
      will fill any available space. This behaviour can be changed.

    - Minimum width and gap can be styled inline using custom properties;
      --min-column-width, --column-gap and --row-gap

    - Influenced by Stephanie Eckles: 
      https://smolcss.dev/#smol-flexbox-grid 
      https://moderncss.dev/solutions-to-replace-the-12-column-grid/#grid

\*---------------------------------------------------------------------------*/
.flex-grid {
  --min-column-width: 15ch;
  --column-gap: var(--padding-container-horizontal);
  --row-gap: var(--margin-paragraph-bottom);
  display: flex;
  flex-wrap: wrap;
  column-gap: var(--column-gap);
  row-gap: var(--row-gap);
  margin: 0 0 var(--margin-paragraph-bottom) 0;
  align-items: baseline;
}
.flex-grid > * {
  flex: 1 1 var(--min-column-width);
  margin-bottom: 0;
}
.flex-grid > * > *:last-child {
  margin-bottom: 0;
}
.flex-grid.vertical-top {
  align-items: flex-start;
}
.flex-grid.vertical-center {
  align-items: center;
}
.flex-grid.vertical-bottom {
  align-items: flex-end;
}
.flex-grid.vertical-stretch {
  align-items: stretch;
}
.flex-grid.no-orphan-columns {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(var(--min-column-width), 1fr));
}

/*---------------------------------------------------------------------------*\

    Alert

    Optional component, to be included in the main scss file.

    Colored element to display a highlighted message. The element may be 
    closed on click. This component is usually used to display a message or
    notification.

    Features:

    - Can be used to style any Html element.

    - Closing function (removes the element).

\*---------------------------------------------------------------------------*/
.alert.success {
  color: #1c7c37;
  background-color: rgba(31, 136, 61, 0.1);
  border-color: rgba(27, 119, 54, 0.5);
}
.alert.success header {
  background-color: rgba(31, 136, 61, 0.15);
}
.alert.success:is(a):hover, .alert.success:is(a):focus {
  background-color: #1f883d;
  color: white;
}
.alert.error {
  color: #a20f2c;
  background-color: rgba(176, 16, 48, 0.1);
  border-color: rgba(167, 15, 45, 0.5);
}
.alert.error header {
  background-color: rgba(176, 16, 48, 0.15);
  border-bottom-color: rgba(208, 121, 9, 0.3);
}
.alert.error:is(a):hover, .alert.error:is(a):focus {
  background-color: #b01030;
  color: white;
}
.alert.warning {
  color: #9a5a06;
  background-color: rgba(218, 127, 9, 0.15);
  border-color: rgba(179, 104, 7, 0.5);
}
.alert.warning header {
  background-color: rgba(218, 127, 9, 0.2);
  border-bottom-color: rgba(179, 104, 7, 0.3);
}
.alert.warning:is(a):hover, .alert.warning:is(a):focus {
  background-color: #da7f09;
  color: white;
}
.alert.info {
  color: #0862cb;
  background-color: rgba(9, 105, 218, 0.1);
  border-color: rgba(9, 100, 208, 0.5);
}
.alert.info header {
  background-color: rgba(9, 105, 218, 0.15);
}
.alert.info a:not(.close[class^=icon-]:empty, .close[class*=" icon-"]:empty) {
  color: var(--color-text);
}
.alert.info:is(a):hover, .alert.info:is(a):focus {
  background-color: #0969da;
  color: white;
}
.alert.fade-out {
  transition: opacity 0.4s ease-in;
  opacity: 0;
}

/*---------------------------------------------------------------------------*\

    JM Admin

    Admin template for web apps.

    https://github.com/JohnModig/JM-Admin.Template

\*---------------------------------------------------------------------------*/
/*-----------------------
    Includes
-----------------------*/
/*-----------------------
    Components
-----------------------*/
:root {
  --color-text: #24292f;
  --color-text-light: #575a5d;
  --color-text-semi-transparent: rgba(36, 41, 47, 0.65);
  --color-link: #0969da;
  --color-link-background-hover: rgba(208, 215, 222, 0.32);
  --color-tag-background: #ddf4ff;
  --color-header-background: #f6f8fa;
  --color-top-header-background: var(--color-header-background);
  --color-top-header-foreground: var(--color-text);
  --color-top-header-link-background-hover: var(--color-link-background-hover);
  --color-top-header-link-foreground-hover: var(--color-text);
  --color-scrollbar-foreground: rgba(0,0,0,0.15);
  --color-scrollbar-background: transparent;
  --color-success: #1f883d;
  --color-error: #b01030;
  --color-info: #0969da;
  --color-warning: #da7f09;
  --border-light: 1px solid rgba(27, 31, 36, 0.15);
  --border-medium: 1px solid rgba(27, 31, 36, 0.3);
  --border-solid: 2px solid #d0d7de;
  --border-radius-button: 6px;
  --font-monospace: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;
  --font-body: -apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji",sans-serif;
  --padding-container-horizontal: 22px;
  --padding-container-vertical: 15px;
  --padding-buttons: .4375rem;
  --grid-gap: 10px;
  --margin-paragraph-bottom: 1.125rem;
  --outline-buttons: 2px solid var(--color-link);
  --box-shadow-light: 0 1px 2px rgba(0,0,0,0.06);
  --box-shadow-medium: 0 1px 5px rgba(0,0,0,0.12);
  --size-container-max-width: 1300px;
}
@media screen and (max-width: 599px) {
  :root {
    --padding-container-horizontal: 10px;
    --padding-container-vertical: 10px;
  }
}

body {
  position: relative;
  background-color: white;
  margin: 0;
  padding: 0;
  text-align: left;
  color: var(--color-text);
  font-family: var(--font-body);
  display: flex;
  flex-direction: column;
  -webkit-text-size-adjust: 100%;
  min-height: 100vh;
  min-height: 100dvh;
}

h1, h2, h3, h4, h5 {
  font-weight: 600;
  line-height: 1.3;
}

p, ul, ol {
  font-size: 0.875rem;
  font-weight: 400;
  line-height: 1.3;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}

h1 {
  font-size: 1.375rem;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}

h2 {
  font-size: 1.25rem;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}

h3 {
  font-size: 1.125rem;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}

h4 {
  font-size: 1rem;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}

h5 {
  font-size: 0.875rem;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}

sup, sub {
  font-size: max(0.6em, 10px);
}

ul, ol {
  padding: 0 0 0 1.5em;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}
ul > li:not(:last-child), ol > li:not(:last-child) {
  margin-bottom: var(--margin-paragraph-bottom);
}

p.comment {
  font-size: 0.75rem;
  color: var(--color-text-light);
}

strong {
  font-weight: 600;
}

span.comment {
  font-size: max(0.75em, 0.75rem);
  font-weight: 400;
  filter: brightness(2);
}

:is(h1, h2, h3, h4, h5) strong {
  font-weight: 700;
}
:is(h1, h2, h3, h4, h5) sup {
  display: inline-block;
  vertical-align: top;
  color: var(--color-text-light);
  line-height: 1;
  padding: calc(var(--padding-buttons) / 2) var(--padding-buttons);
  border: var(--border-light);
  border-radius: calc(var(--padding-buttons) / 2 + 0.5em);
  margin-left: 0.25em;
}
:is(h1, h2, h3, h4, h5) sup:first-child {
  margin-left: 0;
}

code {
  font-family: var(--font-monospace) !important;
  font-weight: normal;
  font-size: max(0.9286em, 11px) !important;
  display: inline-block;
  vertical-align: middle;
  background-color: var(--color-link-background-hover) !important;
  color: var(--color-text);
  margin: -1px 0;
  padding: 1px 0.25em !important;
  white-space: pre !important;
  border-radius: 2px !important;
  overflow-y: auto;
  max-width: 100%;
  box-sizing: border-box;
}

article > code {
  display: block;
  font-size: 0.8125rem !important;
  line-height: 1.3 !important;
  padding: var(--padding-buttons) !important;
  border-radius: var(--border-radius-button) !important;
  margin: 0 0 var(--margin-paragraph-bottom) 0;
}

hr {
  height: 1px;
  overflow: hidden;
  margin: var(--margin-paragraph-bottom) 0 var(--margin-paragraph-bottom) 0;
  padding: 0;
  border: none;
  border-bottom: var(--border-light);
}

.small {
  font-size: 0.75rem;
}

.light {
  color: var(--color-text-light);
}

.thin {
  font-weight: 100;
}

.normal {
  font-weight: 400;
}

.strong {
  font-weight: 600;
}

.no-margin-bottom {
  margin-bottom: 0 !important;
}

.semi-transparent {
  opacity: 0.5;
}

.readability-width {
  max-width: 60ch !important;
}

a {
  color: var(--color-link);
  text-decoration: none;
}
a:hover, a:focus {
  text-decoration: underline;
}
a:focus-visible {
  outline: var(--outline-buttons);
}

:is(h1, h2, h3, h4, h5) a {
  color: inherit;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-left {
  text-align: left;
}

:is(h1, h2, h3, h4, h5, p, li, a, span, summary, div, section, label)[class^=icon-]:before, :is(h1, h2, h3, h4, h5, p, li, a, span, summary, div, section, label)[class*=" icon-"]:before {
  font-size: 1.1428em;
  display: inline-block;
  vertical-align: baseline;
  color: inherit;
  opacity: 0.8;
}
:is(h1, h2, h3, h4, h5, p, li, a, span, summary, div, section, label)[class^=icon-]:not(:empty):before, :is(h1, h2, h3, h4, h5, p, li, a, span, summary, div, section, label)[class*=" icon-"]:not(:empty):before {
  margin-right: 0.375em;
}

a:where([class^="icon-"], &[class*=" icon-"]):empty {
  text-decoration: none;
  color: inherit;
}
a:where([class^="icon-"], &[class*=" icon-"]):empty:hover, a:where([class^="icon-"], &[class*=" icon-"]):empty:focus {
  text-decoration: none;
  color: var(--color-link);
}

:is(sub, sup)[class^=icon-]:not(:empty):before, :is(sub, sup)[class*=" icon-"]:not(:empty):before {
  margin-right: 0.25em;
}

img {
  max-width: 100%;
}
img.round {
  border-radius: 50%;
}
img.centered {
  display: block;
  margin: 0 auto var(--margin-paragraph-bottom) auto !important;
}

header {
  background-color: var(--color-header-background);
  border-bottom: var(--border-light);
  font-size: 0.875rem;
  margin: 0;
}

main header > *, dialog header > * {
  margin-bottom: 0;
}
main header a, dialog header a {
  color: inherit;
}

main {
  padding: var(--padding-container-vertical) var(--padding-container-horizontal);
  width: 100%;
  box-sizing: border-box;
  max-width: var(--size-container-max-width);
  margin: 0 auto;
  display: block;
  flex: 1 0 auto;
  align-content: flex-start;
}
main > * + * {
  margin-top: var(--margin-paragraph-bottom);
}
main > *.no-margin-bottom + * {
  margin-top: 0;
}
@media screen and (min-width: 600px) {
  main.header-content-sidebar {
    display: grid;
    grid-column-gap: var(--padding-container-horizontal);
    grid-row-gap: var(--margin-paragraph-bottom);
    grid-template-columns: 2fr minmax(200px, 1fr);
    grid-template-areas: "header header" "article sidebar";
  }
  main.header-content-sidebar > * + * {
    margin-top: 0;
  }
  main.header-content-sidebar > * {
    margin: 0;
  }
}
@media screen and (min-width: 600px) {
  main.header-sidebar-content {
    display: grid;
    grid-column-gap: var(--padding-container-horizontal);
    grid-row-gap: var(--margin-paragraph-bottom);
    grid-template-columns: minmax(200px, 1fr) 2fr;
    grid-template-areas: "header header" "sidebar article";
  }
  main.header-sidebar-content > * + * {
    margin-top: 0;
  }
  main.header-sidebar-content > * {
    margin: 0;
  }
}
@media screen and (min-width: 600px) {
  main.sidebar-header-content {
    display: grid;
    grid-column-gap: var(--padding-container-horizontal);
    grid-row-gap: var(--margin-paragraph-bottom);
    grid-template-columns: minmax(200px, 1fr) 3fr;
    grid-template-areas: "sidebar header" "sidebar article";
    grid-template-rows: auto 1fr;
  }
  main.sidebar-header-content > * + * {
    margin-top: 0;
  }
  main.sidebar-header-content > * {
    margin: 0;
  }
}
@media screen and (min-width: 600px) {
  main.header-badges-content-sidebar {
    display: grid;
    grid-column-gap: var(--padding-container-horizontal);
    grid-row-gap: var(--margin-paragraph-bottom);
    grid-template-columns: 2fr minmax(200px, 1fr);
    grid-template-areas: "header badges" "article sidebar";
  }
  main.header-badges-content-sidebar > * + * {
    margin-top: 0;
  }
  main.header-badges-content-sidebar > * {
    margin: 0;
  }
  main.header-badges-content-sidebar > section.badges {
    text-align: right;
  }
  main.header-badges-content-sidebar > section.badges:after {
    content: "";
    height: 0;
    overflow: auto;
    border-bottom: var(--border-light);
    width: var(--padding-container-horizontal);
    position: absolute;
    bottom: -1px;
    left: calc(1px - var(--padding-container-horizontal) - 1px);
  }
}
@media screen and (min-width: 600px) {
  main.navigation-content {
    display: grid;
    grid-column-gap: var(--padding-container-horizontal);
    grid-row-gap: var(--margin-paragraph-bottom);
    grid-template-columns: minmax(max-content, 1fr) 3fr;
    grid-template-areas: "sidebar article";
  }
  main.navigation-content > * + * {
    margin-top: 0;
  }
  main.navigation-content > * {
    margin: 0;
  }
}
@media screen and (max-width: 599px) {
  main.navigation-content > aside {
    border-bottom: var(--border-light);
    padding-bottom: var(--margin-paragraph-bottom);
  }
}
main.centered-content {
  display: flex;
  flex-direction: column;
  align-content: center;
  align-items: center;
  justify-content: center;
}
main.centered-content *:first-child {
  margin-top: 0;
}
main.centered-content *:last-child {
  margin-bottom: 0;
}
main > section.header {
  grid-area: header;
  border-bottom: var(--border-light);
  padding-bottom: var(--margin-paragraph-bottom);
}
@media screen and (max-width: 599px) {
  main > section.header {
    border-bottom: none;
    padding-bottom: 0;
  }
}
main > section.badges {
  grid-area: badges;
  position: relative;
  border-bottom: var(--border-light);
  padding-bottom: var(--margin-paragraph-bottom);
}
@media screen and (max-width: 599px) {
  main > section.badges {
    border-bottom: none;
    padding-bottom: 0;
  }
}
main article {
  grid-area: article;
  min-width: 0;
  max-width: 100%;
  box-sizing: border-box;
}
main aside {
  grid-area: sidebar;
}
main aside > nav {
  padding: 0 8px;
}
main aside > nav > a {
  display: block;
  position: relative;
  font-size: 0.875rem;
  padding: var(--padding-buttons);
  color: var(--color-text);
  border-radius: var(--border-radius-button);
}
main aside > nav > a:hover, main aside > nav > a:focus {
  background-color: var(--color-link-background-hover);
  text-decoration: none;
}
main aside > nav > a.current {
  background-color: var(--color-link-background-hover);
  font-weight: 600;
}
main aside > nav > a.current:after {
  content: "";
  display: block;
  position: absolute;
  overflow: hidden;
  left: -8px;
  top: 3px;
  bottom: 3px;
  width: 4px;
  background-color: var(--color-link);
  border-radius: 2px;
}
main aside > nav > h5 {
  font-size: 0.75rem;
  color: var(--color-text-light);
  padding: var(--padding-buttons);
  margin: 0;
}
main aside > nav > hr {
  height: calc(var(--padding-buttons) * 2);
  line-height: calc(var(--padding-buttons) * 2);
  font-size: calc(var(--padding-buttons) * 2);
  margin: 0 -8px calc(var(--padding-buttons) * 2) -8px;
}
main section {
  margin: 0 0 var(--margin-paragraph-bottom) 0;
  max-width: 100%;
  box-sizing: border-box;
}
main article *:first-child, main aside *:first-child, main section *:first-child {
  margin-top: 0;
}
main article *:last-child, main aside *:last-child, main section *:last-child {
  margin-bottom: 0;
}

body > footer {
  padding: calc(var(--padding-container-vertical) * 3) var(--padding-container-horizontal) var(--padding-container-vertical) var(--padding-container-horizontal);
  display: flex;
  gap: var(--padding-container-horizontal);
  align-items: center;
  flex-wrap: wrap;
  justify-content: center;
  font-size: 0.75rem;
  font-weight: 400;
  line-height: 1.3;
  color: var(--color-text-light);
}
body > footer > * {
  display: inline-flex;
  align-items: center;
  column-gap: 1ch;
}
body > footer a {
  color: var(--color-text-light);
}
body > footer a:hover, body > footer a:focus {
  color: var(--color-link);
}
